{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Supabase Authentication Infrastructure",
        "description": "Create and configure Supabase project with OAuth providers and database schema for rate limiting",
        "details": "Create new Supabase project and configure Google OAuth 2.0 and Apple Sign-In providers. Set up Google Cloud Console with OAuth 2.0 credentials (client ID, client secret) and configure authorized redirect URIs. For Apple Sign-In, configure Apple Developer Portal with Services ID and domain verification. Create demo_rate_limits table with schema: id (UUID primary key), user_id (UUID foreign key to auth.users), requests_used (integer default 0), requests_limit (integer default 5), is_admin (boolean default false), created_at (timestamp), updated_at (timestamp). Implement Row Level Security policies: CREATE POLICY demo_rate_limits_policy ON demo_rate_limits FOR ALL USING (auth.uid() = user_id). Add database triggers for automatic rate limit record creation on user registration. Configure Supabase Auth settings with proper redirect URLs for both development (localhost:3000) and production environments.",
        "testStrategy": "Test OAuth flows with real Google and Apple accounts in development environment. Verify RLS policies by attempting cross-user data access. Test database triggers by creating new users and confirming rate limit records are automatically generated. Validate redirect URLs work correctly for both providers.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create and configure Supabase project",
            "description": "Set up new Supabase project with basic configuration and obtain project credentials",
            "dependencies": [],
            "details": "Create new Supabase project, configure project settings, obtain project URL and anon key, set up project-level security settings",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Configure Google OAuth provider in Supabase",
            "description": "Set up Google OAuth integration including Google Cloud Console configuration and Supabase provider setup",
            "dependencies": [
              1
            ],
            "details": "Create Google Cloud project, configure OAuth consent screen, generate client ID and secret, configure Google provider in Supabase Auth settings with proper scopes and redirect URLs",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Configure Apple OAuth provider in Supabase",
            "description": "Set up Apple Sign-In integration including Apple Developer Portal configuration and Supabase provider setup",
            "dependencies": [
              1
            ],
            "details": "Configure Apple Developer account, create App ID and Service ID, generate private key, configure Apple provider in Supabase Auth settings with proper team ID and key ID",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Design and create database schema",
            "description": "Create comprehensive database schema for multi-tenant recipe application with proper relationships",
            "dependencies": [
              1
            ],
            "details": "Create clients table for API key management, recipes table for processed recipes, usage tracking tables, implement proper foreign key relationships and indexes for performance",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement Row Level Security (RLS) policies",
            "description": "Configure RLS policies for all database tables to ensure proper data isolation and security",
            "dependencies": [
              4
            ],
            "details": "Enable RLS on all tables, create policies for client data isolation, implement admin access policies, configure user-specific data access rules for multi-tenant architecture",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Configure environment variables for development and production",
            "description": "Set up environment configuration for both development and production environments with proper secrets management",
            "dependencies": [
              2,
              3
            ],
            "details": "Configure .env files for local development, set up Vercel environment variables for production, configure OAuth redirect URLs for both environments, document environment setup process",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "Integrate Supabase Authentication in React Frontend",
        "description": "Install Supabase client and implement authentication context with OAuth sign-in components",
        "details": "Install @supabase/supabase-js latest version (^2.39.0). Create authentication context using React.createContext and useReducer for state management. Implement AuthProvider component with session persistence using supabase.auth.getSession() and onAuthStateChange listener. Create OAuth sign-in components with supabase.auth.signInWithOAuth() for both Google and Apple providers. Add sign-out functionality with supabase.auth.signOut(). Implement session management with automatic token refresh. Create user profile display component showing user email and avatar from user metadata. Add loading states during authentication process and error handling for failed authentication attempts. Store Supabase credentials in environment variables: REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY.",
        "testStrategy": "Test OAuth sign-in flow with both Google and Apple accounts. Verify session persistence across browser restarts. Test sign-out functionality clears all session data. Validate error handling for network failures and invalid credentials. Test authentication state changes are properly reflected in UI components.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Setup Supabase client configuration",
            "description": "Initialize and configure the Supabase client with proper environment variables and connection settings",
            "dependencies": [],
            "details": "Create Supabase client instance with API URL and anon key from environment variables. Configure client options for authentication and ensure proper error handling for connection issues.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create authentication context provider",
            "description": "Implement React context for managing authentication state across the application",
            "dependencies": [
              1
            ],
            "details": "Create AuthContext with user state, loading states, and authentication methods. Implement context provider component that wraps the application and manages global auth state.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Build OAuth sign-in components",
            "description": "Create reusable UI components for OAuth authentication flows",
            "dependencies": [
              2
            ],
            "details": "Implement sign-in buttons and forms for OAuth providers. Create components for sign-in, sign-up, and sign-out actions with proper loading states and user feedback.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement session management",
            "description": "Add session persistence and automatic session refresh functionality",
            "dependencies": [
              2
            ],
            "details": "Implement session storage, automatic token refresh, and session validation. Handle session expiration and provide methods for checking authentication status.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Add comprehensive error handling",
            "description": "Implement error handling for authentication failures and edge cases",
            "dependencies": [
              3,
              4
            ],
            "details": "Create error handling for network failures, invalid credentials, expired sessions, and OAuth callback errors. Implement user-friendly error messages and recovery flows.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Rate Limiting Display and Management",
        "description": "Create quota tracking components and real-time usage display with admin user detection",
        "details": "Create rate limiting service using Supabase client to fetch user quota from demo_rate_limits table. Implement quota progress component using HTML progress element or custom CSS progress bar with Tailwind CSS classes. Add real-time subscription using supabase.channel().on('postgres_changes') to listen for rate limit updates. Create quota exceeded component with contact information and next steps messaging. Implement admin user detection by checking is_admin flag from database or user metadata. For admin users, display unlimited status instead of quota progress. Add usage increment logic that updates requests_used after successful API calls. Create custom hook useRateLimit() for managing quota state across components. Style quota display with Tailwind CSS using green/yellow/red color scheme based on usage percentage.",
        "testStrategy": "Test quota display accuracy by comparing with database values. Verify real-time updates when quota changes. Test admin user detection with flagged admin account. Validate quota exceeded state prevents API calls and shows appropriate messaging. Test quota progress visual indicators at different usage levels.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Backend JWT Verification and Rate Limiting",
        "description": "Add Supabase JWT verification to FastAPI backend with rate limiting middleware",
        "details": "Install supabase-py client library (^2.3.0) in FastAPI backend. Create JWT verification dependency using supabase.auth.get_user() to validate and extract user information from Authorization header. Implement rate limiting middleware that checks user quota against demo_rate_limits table before processing requests. Add atomic database operations using Supabase client to increment requests_used counter. Create admin user bypass logic checking is_admin flag from user record. Add rate limit headers to API responses: X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset. Implement proper error responses for quota exceeded (429 status) and authentication failures (401 status). Add comprehensive logging for rate limiting events and quota tracking. Create database connection pooling for performance optimization. Update existing recipe processing endpoints to use authentication dependency: /api/v1/recipe/text, /api/v1/recipe/url, /api/v1/recipe/image.",
        "testStrategy": "Test JWT verification with valid and invalid tokens. Verify rate limiting blocks requests when quota exceeded. Test admin user bypass functionality. Validate rate limit headers are correctly returned. Test atomic database operations under concurrent load. Verify error responses match expected format and status codes.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement JWT verification middleware",
            "description": "Create JWT token validation middleware for request authentication",
            "dependencies": [],
            "details": "Implement JWT token validation middleware that extracts and verifies JWT tokens from Authorization headers. Include token expiration checks, signature validation, and payload extraction. Handle malformed tokens and expired tokens with appropriate error responses.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create rate limiting service",
            "description": "Implement rate limiting functionality with configurable limits per client",
            "dependencies": [
              1
            ],
            "details": "Design and implement rate limiting service that tracks request counts per client within time windows. Support configurable limits, sliding window or fixed window algorithms, and integration with database for persistence. Include rate limit headers in responses.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement database operations for authentication",
            "description": "Create database layer for client authentication and usage tracking",
            "dependencies": [],
            "details": "Implement database operations for client lookup, authentication status verification, and usage tracking updates. Include atomic operations for request counting, connection pooling, and proper error handling for database failures.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create admin bypass logic and error handling",
            "description": "Implement admin authentication bypass and comprehensive error handling",
            "dependencies": [
              1,
              3
            ],
            "details": "Create admin bypass logic for administrative endpoints with separate authentication mechanism. Implement comprehensive error handling for authentication failures, database errors, and rate limiting. Include proper HTTP status codes and structured error responses.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Integrate endpoint protection and logging",
            "description": "Apply authentication middleware to endpoints and implement request logging",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Integrate authentication middleware with FastAPI endpoints using dependency injection. Implement comprehensive request logging with client identification, request details, and performance metrics. Ensure all recipe endpoints are protected while maintaining backward compatibility.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Build Guided Tutorial System",
        "description": "Create comprehensive onboarding tutorial with step-by-step recipe processing walkthrough",
        "details": "Create tutorial context using React Context API with tutorial state management. Define tutorial steps array with step data including target elements, content, and actions. Implement tutorial overlay component using React Portal for modal-like behavior. Add spotlight effect using CSS backdrop-filter and absolute positioning to highlight specific UI elements. Create tutorial navigation with Next/Previous/Skip buttons and step indicators. Implement sample recipe text auto-population: Hebrew recipe with complex ingredients to showcase RTL and AI parsing capabilities. Add tutorial completion tracking in localStorage to prevent repeated tutorials. Create skip tutorial functionality with confirmation dialog. Use Framer Motion for smooth transitions between tutorial steps. Implement mobile-responsive tutorial design with touch-friendly navigation. Add tutorial progress indicator showing current step and total steps.",
        "testStrategy": "Test tutorial flow from start to completion with sample recipe processing. Verify skip functionality works correctly and persists completion status. Test tutorial on mobile devices for responsive behavior. Validate spotlight effects correctly highlight target elements. Test tutorial completion status persistence across browser sessions.",
        "priority": "medium",
        "dependencies": [
          "7"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement tutorial state management system",
            "description": "Create React Context and hooks for managing tutorial state across the application",
            "dependencies": [],
            "details": "Develop TutorialContext with state for current step, active tutorials, completion status, and user preferences. Include hooks for accessing and updating tutorial state, with persistence to localStorage. Handle tutorial initialization, step navigation, and completion logic.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Build overlay and backdrop components",
            "description": "Create the visual overlay system that dims the background during tutorials",
            "dependencies": [
              1
            ],
            "details": "Implement overlay component with configurable opacity and color. Use React Portal to render at document root level. Add fade-in/fade-out animations and ensure proper z-index stacking. Include click-outside handling to close tutorials when appropriate.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Develop spotlight component with positioning",
            "description": "Create the spotlight effect that highlights specific UI elements during tutorials",
            "dependencies": [
              2
            ],
            "details": "Build spotlight component that can dynamically position and resize based on target elements. Implement smooth transitions between different spotlight positions. Add border radius and shadow effects. Handle edge cases for elements near viewport boundaries and ensure mobile responsiveness.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create tutorial navigation system",
            "description": "Build the navigation controls for moving through tutorial steps",
            "dependencies": [
              1
            ],
            "details": "Implement next/previous buttons, step indicators, and progress bar. Add keyboard navigation support (arrow keys, escape). Include skip tutorial and restart functionality. Handle branching tutorials and conditional steps based on user actions.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement content delivery system",
            "description": "Create the system for displaying tutorial content and tooltips",
            "dependencies": [
              3,
              4
            ],
            "details": "Build tooltip/popover component with smart positioning relative to spotlight. Support rich content including text, images, and interactive elements. Implement content templates and markdown support. Add dynamic content loading and localization support using the existing locale system.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Create sample tutorial data and configuration",
            "description": "Define sample tutorial content and configuration for the recipe processing workflow",
            "dependencies": [],
            "details": "Create tutorial definitions for key app features like recipe input, processing options, and result interpretation. Define tutorial steps with target selectors, content, and positioning. Include onboarding tutorial for new users and feature-specific tutorials for advanced functionality.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Implement completion tracking and analytics",
            "description": "Build system to track tutorial completion and user engagement",
            "dependencies": [
              1,
              5,
              6
            ],
            "details": "Implement completion tracking with localStorage persistence. Add analytics events for tutorial start, step completion, and abandonment. Create user preferences for tutorial visibility and replay options. Include admin capabilities to reset tutorial state for testing purposes.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Configure Netlify Production Deployment",
        "description": "Set up Netlify hosting with build configuration and environment variables for production",
        "details": "Create Netlify project connected to GitHub repository with automatic deployment on main branch push. Configure build settings: Build command 'npm run build', Publish directory 'build', Install command 'npm install'. Set up environment variables in Netlify dashboard: REACT_APP_SUPABASE_URL (production Supabase URL), REACT_APP_SUPABASE_ANON_KEY (production anonymous key), REACT_APP_API_URL (production FastAPI backend URL), REACT_APP_API_KEY (demo client API key). Configure custom domain with SSL certificate through Let's Encrypt. Set up redirects for SPA routing: /* /index.html 200. Add security headers: X-Frame-Options, X-Content-Type-Options, Referrer-Policy. Configure caching headers for static assets with long-term caching for JS/CSS and short-term for HTML. Set up Netlify Edge Functions if needed for any server-side processing. Add build optimization: code splitting, tree shaking, and bundle analysis using webpack-bundle-analyzer.",
        "testStrategy": "Test production deployment builds successfully without errors. Verify all environment variables are correctly configured and accessible. Test custom domain resolves with valid SSL certificate. Validate SPA routing works correctly with direct URL access. Test caching headers optimize load times without breaking functionality.",
        "priority": "medium",
        "dependencies": [
          "3",
          "4"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Integrate Frontend with Authenticated Backend API",
        "description": "Update API service layer to include JWT authentication and handle rate limiting responses",
        "details": "Update existing API service functions in demo-frontend/src/utils/api.js to include Authorization header with JWT token from Supabase session. Modify processRecipeText, processRecipeUrl, and processRecipeImage functions to handle authentication. Add rate limiting error handling for 429 status responses with user-friendly messaging. Implement retry logic with exponential backoff for temporary failures. Add rate limit header parsing to extract quota information from API responses. Update error handling to distinguish between authentication errors (401), rate limiting (429), and server errors (500). Add request interceptor to automatically include JWT token in all API calls. Implement token refresh logic when JWT expires during API calls. Add loading states specific to rate limiting checks vs actual processing. Update API base URL to use environment variable for production deployment.",
        "testStrategy": "Test API calls include proper Authorization headers with valid JWT tokens. Verify rate limiting errors are handled gracefully with appropriate user messaging. Test token refresh functionality when JWT expires. Validate rate limit information is correctly extracted from response headers. Test error handling for various failure scenarios.",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-26T12:57:05.461Z",
      "updated": "2025-06-27T14:42:08.559Z",
      "description": "Tasks for demo-deployment context"
    }
  }
}