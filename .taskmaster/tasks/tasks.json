{
  "master": {
    "tasks": [],
    "metadata": {
      "created": "2025-06-24T05:57:29.805Z",
      "updated": "2025-06-24T05:57:29.805Z",
      "description": "Tasks for master context"
    }
  },
  "pdf-export": {
    "tasks": [
      {
        "id": 1,
        "title": "Update ExportOptions Component Structure",
        "description": "Replace the current multi-format export grid with a single PDF export interface featuring live print preview",
        "details": "Completely rewrite demo-frontend/src/components/ResultDisplay/ExportOptions.jsx to remove JSON/Markdown/Text export options and replace with a single PDF export button and print preview area. Component should display the recipe content in print-optimized layout using existing Recipe data structure. Use React functional component with hooks for state management. Implement conditional rendering to show preview alongside export button. Ensure component maintains existing prop interfaces to avoid breaking parent components.",
        "testStrategy": "Unit tests for component rendering, prop handling, and state management. Visual regression tests for preview layout. Integration tests with parent ResultDisplay component to ensure proper data flow.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Create Print-Optimized CSS Styles",
        "description": "Implement comprehensive @media print CSS rules for clean, printable recipe layout with Hebrew RTL support",
        "details": "Add print styles to demo-frontend/src/index.css using @media print queries. Hide navigation elements (.tab-navigation, .export-button, .back-button). Optimize typography with 12pt body font, 18pt h1, 14pt h2. Set page margins to 0.5in using @page rule. Implement page-break-before: always for .page-break class. Add RTL support with direction: rtl and text-align: right for Hebrew content. Use CSS Grid or Flexbox for ingredient lists and instruction formatting. Ensure consistent rendering across Chrome, Firefox, Safari, and Edge browsers.",
        "testStrategy": "Cross-browser print preview testing on Chrome, Firefox, Safari, Edge. Hebrew RTL text rendering validation. Multi-page recipe pagination testing. Print CSS validation tools and manual print testing.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implement Browser Print API Integration",
        "description": "Add window.print() functionality with proper event handling and user feedback for PDF export",
        "details": "Create handleExportPDF function in ExportOptions.jsx that calls window.print() with proper error handling. Add loading state management during print dialog interaction. Implement beforeprint and afterprint event listeners to provide user feedback. Add keyboard shortcut support (Ctrl+P) for quick export. Include fallback error handling for browsers that don't support print-to-PDF. Ensure function works correctly with existing recipe data structure and maintains component state.",
        "testStrategy": "Manual testing across different browsers and operating systems. Keyboard shortcut functionality testing. Error handling validation for unsupported browsers. User experience testing for print dialog interaction.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Optimize Recipe Content Layout for Print",
        "description": "Structure recipe display components for optimal print rendering with proper content hierarchy",
        "details": "Modify recipe content structure to use semantic HTML elements (article, section, header) for better print rendering. Implement proper heading hierarchy (h1 for recipe name, h2 for sections like ingredients/instructions). Create ingredient list with proper ol/ul elements and CSS counters for numbering. Format instruction steps with clear visual separation and numbering. Add recipe metadata display (prep time, cook time, servings) formatted for print. Ensure Hebrew content uses proper HTML dir='rtl' attributes alongside CSS direction property.",
        "testStrategy": "Print layout validation across different recipe types and lengths. Hebrew content rendering verification. Semantic HTML structure validation. Multi-page recipe flow testing.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Handle Multi-Page Recipe Pagination",
        "description": "Implement proper page breaks and content flow for recipes that span multiple pages",
        "details": "Add CSS page-break rules to prevent awkward content splitting. Use page-break-inside: avoid for ingredient items and instruction steps. Implement page-break-after: auto for major sections (ingredients to instructions transition). Add page-break-before: always for new recipe sections if multiple recipes. Use orphans and widows CSS properties to control text flow (orphans: 3, widows: 3). Implement table-layout: fixed for ingredient tables to prevent column breaking across pages.",
        "testStrategy": "Long recipe pagination testing with various content lengths. Page break behavior validation across different browsers. Print preview testing for content flow and readability.",
        "priority": "medium",
        "dependencies": [
          2,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Update ResultDisplay Parent Component",
        "description": "Modify the parent ResultDisplay component to integrate with the new PDF-only export system",
        "details": "Update demo-frontend/src/components/ResultDisplay/index.jsx to remove references to multiple export formats. Modify handleExport function to only handle PDF export functionality. Update state management to remove format selection logic. Ensure proper props are passed to updated ExportOptions component. Update any export-related conditional rendering to accommodate single PDF format. Maintain existing component interfaces to avoid breaking changes in parent components.",
        "testStrategy": "Integration testing between ResultDisplay and ExportOptions components. Prop passing validation. State management testing for export functionality. Regression testing to ensure no breaking changes to parent components.",
        "priority": "medium",
        "dependencies": [
          1,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Generate Dynamic PDF Filenames",
        "description": "Implement automatic filename generation based on recipe name for better file organization",
        "details": "Create utility function to generate PDF filenames from recipe names. Sanitize recipe names by removing special characters, replacing spaces with underscores, and limiting length to 50 characters. Add fallback filename 'recipe' for unnamed recipes. Handle Hebrew characters by transliterating or keeping Unicode. Implement filename suggestion through document.title property before calling window.print(). Consider adding timestamp suffix for duplicate recipe names. Store filename generation logic in separate utility file for reusability.",
        "testStrategy": "Filename generation testing with various recipe name formats including Hebrew, special characters, and long names. PDF save dialog verification to ensure suggested filenames appear correctly. Edge case testing for empty or invalid recipe names.",
        "priority": "low",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Add Print Preview Modal Enhancement",
        "description": "Create an optional modal preview system for better user control over print settings",
        "details": "Implement modal component using React Portal API for print preview functionality. Create modal with recipe preview, print settings recommendations (landscape vs portrait), and export button. Use CSS transforms to scale recipe content for modal preview. Add modal state management with open/close functionality. Implement escape key and overlay click to close modal. Add print settings guidance text and tips for optimal results. Ensure modal is accessible with proper ARIA labels and focus management.",
        "testStrategy": "Modal functionality testing including open/close behavior. Keyboard navigation and accessibility testing. Print preview accuracy validation compared to actual print output. Mobile responsiveness testing for modal display.",
        "priority": "low",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Recipe Metadata Print Display",
        "description": "Add formatted recipe metadata (prep time, cook time, servings) optimized for print layout",
        "details": "Create metadata display component for print view showing prep time, cook time, total time, servings, difficulty level, and recipe source. Format metadata using CSS Grid or Flexbox for clean print layout. Add icons or visual indicators for each metadata type using CSS pseudo-elements or print-safe symbols. Implement conditional rendering to hide empty metadata fields. Style metadata section to appear prominently at top of recipe but blend well with overall design. Ensure Hebrew metadata labels are properly translated and RTL-aligned.",
        "testStrategy": "Metadata display testing with various recipe types and metadata completeness. Print layout validation for metadata section positioning and formatting. Hebrew translation and RTL layout testing for metadata labels.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Add Cross-Browser Print Compatibility",
        "description": "Ensure consistent print behavior and fallbacks across different browsers and operating systems",
        "details": "Implement browser detection using navigator.userAgent or feature detection for print capabilities. Add CSS vendor prefixes for print-specific properties (-webkit-print-color-adjust, print-color-adjust). Create browser-specific CSS overrides for inconsistent print behavior. Implement progressive enhancement for unsupported browsers with graceful degradation. Add user agent specific print dialog guidance text. Test and document print-to-PDF support levels across Chrome (excellent), Firefox (good), Safari (native), and Edge (full support).",
        "testStrategy": "Comprehensive cross-browser testing on Windows, macOS, and Linux. Print-to-PDF functionality validation across different browser versions. Fallback behavior testing for older browsers. Documentation of browser-specific print behavior and limitations.",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Update Internationalization for Export Interface",
        "description": "Add proper Hebrew and English translations for the new PDF export interface elements",
        "details": "Update demo-frontend/src/locales/en.json and he.json with new translation keys for PDF export interface. Add translations for 'Export as PDF', 'Print Preview', 'Print Recipe', loading states, and error messages. Ensure Hebrew translations are culturally appropriate and use proper RTL formatting. Update any hardcoded English text in components to use translation functions. Add translation keys for print guidance text and modal content. Implement proper text direction handling for mixed language content in print view.",
        "testStrategy": "Translation completeness validation for both English and Hebrew. RTL text rendering testing in both preview and print modes. Language switching functionality testing. Cultural appropriateness review for Hebrew translations.",
        "priority": "low",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Implement Error Handling and User Feedback",
        "description": "Add comprehensive error handling, loading states, and user guidance for the PDF export process",
        "details": "Implement try-catch error handling around window.print() calls with user-friendly error messages. Add loading spinner or progress indicator during print dialog interaction. Create user guidance tooltips or help text explaining print-to-PDF process. Implement error state management with retry functionality. Add success feedback when print dialog completes successfully. Create fallback messaging for browsers without print-to-PDF support. Include accessibility-compliant error messages with proper ARIA attributes and screen reader support.",
        "testStrategy": "Error handling testing by simulating print failures and browser limitations. Loading state validation during print dialog interaction. User experience testing for error messages and guidance text. Accessibility testing for error states and user feedback with screen readers.",
        "priority": "medium",
        "dependencies": [
          3,
          6
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-24T05:57:38.780Z",
      "updated": "2025-06-24T05:57:38.780Z",
      "description": "PDF export functionality with HTML templates"
    }
  }
}